5. Count the Digits
Take an integer n (n >= 0) and a digit d (0 <= d <= 9) as an integer.
Square all numbers k (0 <= k <= n) between 0 and n.
Count the numbers of digits d used in the writing of all the k**2.
Call nb_dig (or nbDig or ...) the function taking n and d as parameters and returning this count.

Examples:
n = 10, d = 1 
the k*k are 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100
We are using the digit 1 in: 1, 16, 81, 100. The total count is then 4.

nb_dig(25, 1) returns 11 since
the k*k that contain the digit 1 are:
1, 16, 81, 100, 121, 144, 169, 196, 361, 441.
So there are 11 digits 1 for the squares of numbers between 0 and 25.

Program:
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    int n = sc.nextInt();
	    int d = sc.nextInt();
        int final_det = 0;
        int sq_value = 0, rem = 0;
        for(int i = 0; i<=n; i++) {
          if(i == 0 && i == d) {
            final_det++;
            i++;
            continue;
          } 
          sq_value = i*i;
          while(sq_value > 0) {
            rem = sq_value%10;
            if(rem == d) {
              final_det++;
            }
            sq_value=sq_value/10;
          }
        }
      System.out.println(final_det);
    }
}

Test case 1:
Input:
25
1
Output:
11

Test case 2:
Input:
5750
0
Output:
4700

Test case 3:
Input:
11011
2
Output:
9481

Test case 4:
Input:
12224
8
Output:
7788

Test case 5:
Input:
11549
1
Output:
11905
